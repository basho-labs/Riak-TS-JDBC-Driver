package com.basho.riakts.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.concurrent.ExecutionException;

import com.basho.riak.client.api.RiakClient;
import com.basho.riak.client.api.commands.timeseries.Query;
import com.basho.riak.client.core.query.timeseries.QueryResult;

public class Statement implements java.sql.Statement {
	
	RiakClient _client;
	ResultSet _resultSet;
	
	Statement(RiakClient client, int type, int concurrency, int holdability) {
		if ( type != 0 || concurrency != 0 || holdability != 0 )
            throw new UnsupportedOperationException(  );
		_client = client;
	}
	
	/***
	 * Executes SQL query against Riak TS and converts QueryResult object
	 * to ResultSet and sets _resultSet value
	 * @param sql
	 * @throws ExecutionException
	 * @throws InterruptedException
	 * @throws SQLException 
	 */
	private void query(String sql) throws ExecutionException, InterruptedException, SQLException {
		Query query = new Query.Builder(sql).build();
		QueryResult queryResult = _client.execute(query);
		_resultSet = Utility.getResultSetFromQueryResult(queryResult);
	}
	
	
	public int executeUpdate(String sql) throws SQLException {
		Query query = new Query.Builder(sql).build();
		try {
			QueryResult queryResult = _client.execute(query);
			return queryResult.getRowsCount();
		}
		catch (Exception e) {
			throw new SQLException(e);
		}
	}
	

	public ResultSet executeQuery(String sql) throws SQLException {
		try {
			query(sql);
			return _resultSet;
		} 
		catch (Exception e) {
			throw new SQLException();
		}
	}
	
	public boolean execute(String sql) throws SQLException {
		try {
			query(sql);
			return true;
		} 
		catch (Exception e) {
			throw new SQLException();
		}
	}

	public ResultSet getResultSet() throws SQLException {
		return _resultSet;
	}
	
	public Connection getConnection() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}



	public void close() throws SQLException {
		
	}

	public int getMaxFieldSize() throws SQLException {
		return 0;
	}

	public void setMaxFieldSize(int max) throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public int getMaxRows() throws SQLException {
		return 0;
	}

	public void setMaxRows(int max) throws SQLException {
		
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		
	}

	public int getQueryTimeout() throws SQLException {
		return 0;
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		
	}

	public void cancel() throws SQLException {
		
	}

	public SQLWarning getWarnings() throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public void clearWarnings() throws SQLException {
		
	}

	public void setCursorName(String name) throws SQLException {
		
	}

	public void setFetchDirection(int direction) throws SQLException {
		
	}

	public int getFetchDirection() throws SQLException {
		return 0;
	}

	public void setFetchSize(int rows) throws SQLException {
		
	}

	public int getFetchSize() throws SQLException {
		return 0;
	}

	public int getResultSetConcurrency() throws SQLException {
		return 0;
	}

	public int getResultSetType() throws SQLException {
		return 0;
	}

	public void addBatch(String sql) throws SQLException {
		
	}

	public void clearBatch() throws SQLException {
		
	}

	public int[] executeBatch() throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public boolean getMoreResults(int current) throws SQLException {
		return false;
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public int getResultSetHoldability() throws SQLException {
		return 0;
	}

	public boolean isClosed() throws SQLException {
		return false;
	}

	public void setPoolable(boolean poolable) throws SQLException {
		
	}

	public boolean isPoolable() throws SQLException {
		return false;
	}

	public void closeOnCompletion() throws SQLException {
		
	}

	public boolean isCloseOnCompletion() throws SQLException {
		return false;
	}
	
	public <T> T unwrap(Class<T> iface) throws SQLException {
		throw new UnsupportedOperationException(  );
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		throw new UnsupportedOperationException(  );
	}
	
	public int getUpdateCount() throws SQLException {
		return 0;
	}

	public boolean getMoreResults() throws SQLException {
		return false;
	}

}
